# This workflow will 
# - do a clean installation of node dependencies, cache/restore them, and lint the source code and run tests across different versions of node
# - build the docker image and push it to DockerHub
# - deploy the docker images to DigitalOcean
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci

    - name: Run ESLint
      run: npx eslint 'src/**/*.js'

    - name: Install commitlint
      run: |
        npm install conventional-changelog-conventionalcommits
        npm install commitlint@latest

    - name: Validate current commit (last commit) with commitlint
      if: github.event_name == 'push'
      run: npx commitlint --from HEAD~1 --to HEAD --verbose

    - name: Validate PR commits with commitlint
      if: github.event_name == 'pull_request'
      run: npx commitlint --from ${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }} --to ${{ github.event.pull_request.head.sha }} --verbose


  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Build and push Docker images
      uses: docker/build-push-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: taldenv/node-express-docker
        tags: latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Provision Droplet and deploy container
      run: doctl compute droplet create "node-express-docker" --size "s-1vcpu-1gb" --image "ubuntu-20-04-x64" --region "sfo2" --ssh-keys ${{ secrets.DIGITALOCEAN_SSH_KEY_FINGERPRINT }} --wait --no-header --format ID --output "droplet_id"